// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Better Auth tables
model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  emailVerified DateTime?
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  sessions  Session[]
  accounts  Account[]
  conversations Conversation[]

  @@map("user")
}

model Session {
  id        String   @id @default(cuid())
  sessionToken String @unique
  userId    String
  expires   DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("session")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("account")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_token")
}

// Application-specific tables
model Conversation {
  id        String   @id @default(cuid())
  title     String?
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  queries   Query[]

  @@map("conversation")
}

model Query {
  id             String   @id @default(cuid())
  prompt         String
  systemPrompt   String?
  conversationId String
  createdAt      DateTime @default(now())

  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  responses      Response[]

  @@map("query")
}

model Response {
  id           String   @id @default(cuid())
  provider     String   // "openai", "anthropic", "perplexity", "gemini"
  model        String
  content      String
  tokenCount   Int?
  duration     Int?     // milliseconds
  cost         Float?   // estimated cost in USD
  error        String?
  queryId      String
  createdAt    DateTime @default(now())

  query        Query    @relation(fields: [queryId], references: [id], onDelete: Cascade)

  @@map("response")
}
